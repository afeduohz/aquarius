# >>> module List #

# == #
(assert:(List == List) "test (List == List)")

# != #
(assert:(List != 1) "test (List != 1)")
(assert:(List != nil) "test (List != nil)")

# to_s #
(assert:((List to_s) == "<module List>") "test (List to_s)")

# to_b #
(assert:((List to_b) == true) "test (List to_b)")

# type #
(assert:((List type) == "lambda") "test (List type)")

# : #
(let x = (List: 1 true "ok"))
(let y = (List:))
(assert:((x size) == 3) "test (List:)")
(assert:((x @ 2) == "ok") "test (List:)")
(assert:((y size) == 0) "test (List:)")

# >>> value nil #

# == #
(assert:(([] == []) !) "test ([] == [])")

# != #
(assert:([] != []) "test ([] != [])")

# to_s #
(assert:(([1 2] to_s) == "[1 2]") "test ([1 2] to_s)")

# to_b #
(assert:(([] to_b) == true) "test ([] to_b)")

# type #
(assert:(([] type) == "List") "test ([] type)")

# + #
(let x = [])
(let y = ["1"])
(let y1 = ["2" true "1"])
(let z = (x + y y1))
(assert: ((x size) == 0) "test (list +)")
(assert: ((y size) == 1) "test (list +)")
(assert: ((y1 size) == 3) "test (list +)")
(assert: ((z size) == 4) "test (list +)")
(assert: ((z @ 2) == true) "test (list +)")
(assert: ((z to_s) == (["1" "2" true "1"] to_s)) "test (list +)")
(assert: (x != z) "test (list +)")

# - #
(let x = ["1" "2" "3"])
(let y = ["2" "3" nil])
(let z = (x - y))
(assert: ((x size) == 3) "test (list -)")
(assert: ((y size) == 3) "test (list -)")
(assert: ((z to_s) == (["1"] to_s)) "test (list -)")

# * #
(let x = ["1" "2" "3"])
(let y = (x * "*"))
(let z = (x * 4))
(assert: (y == "1*2*3") "test (list *)")
(assert: ((z to_s) == (["1" "2" "3" "1" "2" "3" "1" "2" "3" "1" "2" "3"] to_s)) "test (list *)")

# | #
(let x = ["1" "2" "3"])
(let y = ["1" "4"])
(let z = ( x | y ))
(assert: ((z to_s) == (["1" "2" "3" "4"] to_s)) "test (list |)")

# & #
(let x = ["1" "2" "3"])
(let y = ["1" "4"])
(let z = ( x & y ))
(assert: ((z to_s) == (["1"] to_s)) "test (list &)")

# push << #
# in place #
(let x = ["1" "2" "3"])
(let y = (x push 2))
(let z = (x << 2 3))
(assert: ((x to_s) == (["1" "2" "3" 2 2 3] to_s)) "test (list <<)")
(assert: ((y to_s) == (["1" "2" "3" 2 2 3] to_s)) "test (list <<)")
(assert: ((z to_s) == (["1" "2" "3" 2 2 3] to_s)) "test (list <<)")

# unshift #
(let x = ["1" "2" "3"])
(let y = (x unshift [2]))
(let z = (x unshift 2 3))
(assert: ((x to_s) == ([2 3 [2] "1" "2" "3"] to_s)) "test (list unshift)")
(assert: ((y to_s) == ([2 3 [2] "1" "2" "3"] to_s)) "test (list unshift)")
(assert: ((z to_s) == ([2 3 [2] "1" "2" "3"] to_s)) "test (list unshift)")
(assert: (x == y) "test (list unshift)")
(assert: (x == z) "test (list unshift)")

# >> #
(let x = ["1" "2" "3" "4"])
(let y = (x >>))
(assert: (x == y) "test (list >>)")
(assert: ((x to_s) == (["1" "2" "3"] to_s)) "test (list >>)")
(let z = (x >> 2))
(assert: (x == z) "test (list >>)")
(assert: ((x to_s) == (["1"] to_s)) "test (list >>)")

# @ #
(let x = ["1" "2" "3"])
(let y = (x @))
(assert: (y == "1") "test (list @)")
(let z = (x @ -3))
(assert: (z == "1") "test (list @)")

# any? #
(let x = ["1" "2" "3"])
(let y = (x any?))
(assert: y "test (list any?)")
(assert: (([] any?) !) "test (list any?)")
(let z = (x any? (|i| (i == "4"))))
(assert: (z !) "test (list any?)")
(let z1 = (x any? (|i| (i == "3"))))
(assert: z1 "test (list any?)")
(let z2 = (x any? (||(|i| (i == "5")))))
(assert: z2 "test (list any?)")

# all? #
(let x = ["1" "2" "3"])
(let y = (x all?))
(assert: y "test (list all?)")
(assert: ([] all?) "test (list all?)")
(let z = (x all? (|i| (i == "4"))))
(assert: (z !) "test (list all?)")
(let z1 = (x all? (|i| (i == "3"))))
(assert: (z1 !) "test (list all?)")
(let z2 = (x all? ((||(|i| (i == "7"))):) ))
(assert: (z2 !) "test (list all?)")

# clear #
(let x = ["1" "2" "3"])
(let y = (x clear))
(assert: (x == y) "test (list clear)")
(assert: ((x to_s) == ([] to_s)) "test (list clear)")

# map #
(let x = ["1" "2" "3"])
(let y = (x map))
(assert: (x != y) "test (list map)")
(assert: ((y to_s) == (x to_s)) "test (list map)")
(let z = (x map (|i| (i + "!")) ))
(assert: (x != z) "test (list map)")
(assert: ((z to_s) == (["1!" "2!" "3!"] to_s)) "test (list map)")

# map! #
(let x = ["1" "2" "3"])
(let y = (x map!))
(assert: (x == y) "test (list map!)")
(let z = (x map! (|i| (i + "!")) ))
(assert: (x == z) "test (list map!)")
(assert: ((z to_s) == (["1!" "2!" "3!"] to_s)) "test (list map!)")

# compact #
(let x = ["1" "2" nil "3" false])
(let y = (x compact))
(assert: (x != y) "test (list compact)")
(assert: ((y to_s) == (["1" "2" "3" false] to_s)) "test (list compact)")
(let z = (x compact))
(assert: (x != z) "test (list compact)")
(assert: ((z to_s) == (y to_s)) "test (list compact)")

# compact! #
(let x = ["1" "2" nil "3" false])
(let y = (x compact!))
(assert: (x == y) "test (list compact!)")
(assert: ((y to_s) == (["1" "2" "3" false] to_s)) "test (list compact!)")
(let z = (x compact!))
(assert: (x == z) "test (list compact!)")

# count #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x count))
(assert: (y == 6) "test (list count)")
(let z = (x count "2"))
(assert: (z == 2) "test (list count)")

# cycle #
(let x = ["1" "2"])
(let x0 = [])
(let y = (x cycle 2 (|i| (x0 << i))))
(assert: (x == y) "test (list cycle)")
(assert: ((x0 to_s) == (["1" "2" "1" "2"] to_s)) "test (list cycle)")

# delete@ #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x delete@ -6))
(assert: (y == "1") "test (list delete@)")
(assert: ((x to_s) == (["2" nil "3" false "2"] to_s)) "test (list delete@)")

# delete #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x delete "2"))
(assert: (y == "2") "test (list delete)")
(assert: ((x to_s) == (["1" nil "3" false] to_s)) "test (list delete)")

# delete_if #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x delete_if (|i| (i == "2"))))
(assert: (y == x) "test (list delete_if)")
(assert: ((x to_s) == (["1" nil "3" false] to_s)) "test (list delete_if)")

# drop #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x drop))
(assert: ((y to_s) == (["2" nil "3" false "2"] to_s)) "test (list drop)")
(let y1 = (x drop 2))
(assert: ((y1 to_s) == ([nil "3" false "2"] to_s)) "test (list drop)")
(let y2 = (x drop 5))
(assert: ((y2 to_s) == (["2"] to_s)) "test (list drop)")

#drop_if #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x drop_if (|i| (i == "2"))))
(assert: ((y to_s) == (["1" nil "3" false] to_s)) "test (list drop_if)")
(assert: (y != x) "test (list drop_if)")

# each #
(let x = ["1" "2"])
(let y = [])
(let z = (x each (|i x| (y << x))))
(assert: ((y to_s) == (["1" "2"] to_s)) "test (list each)")
(assert: (z == x) "test (list each)")

# reverse_each #
(let x = ["1" "2"])
(let y = [])
(let z = (x reverse_each (|i x| (y << x))))
(assert: ((y to_s) == (["2" "1"] to_s)) "test (list reverse_each)")
(assert: (z == x) "test (list reverse_each)")

# empty? #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x empty?))
(assert: (y !) "test (list empty?)")
(assert: ([] empty?) "test (list empty?)")

# fetch #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x fetch 1))
(assert: (y == "2") "test (list fetch)")
(let y = (x fetch 6))
(assert: (y == nil) "test (list fetch)")
(let y = (x fetch 6 "default"))
(assert: (y == "default") "test (list fetch)")
(let y = (x fetch 3 (|i| (x @ i))))
(assert: (y == "3") "test (list fetch)")
(let y = (x fetch 6 (|i| i)))
(assert: (y == 6) "test (list fetch)")

# fill #
(let z = [1 2 3])
(let z1 = (z fill 4))
(assert: ((z to_s) == ([4 4 4] to_s)) "test (list fill)")
(assert: (z1 == z) "test (list fill)")
(let z2 = (z fill 6 1))
(assert: (z2 == z) "test (list fill)")
(assert: ((z to_s) == ([4 6 6] to_s)) "test (list fill)")
(let z3 = (z fill 9 1 1))
(assert: (z3 == z) "test (list fill)")
(assert: ((z to_s) == ([4 9 6] to_s)) "test (list fill)")
(let z4 = (z fill (|i|i) 1))
(assert: (z4 == z) "test (list fill)")
(assert: ((z to_s) == ([4 1 2] to_s)) "test (list fill)")

# index #
(let a = ["1" "2" "3"])
(let a1 = (a index 3))
(assert: (a1 == nil) "test (list index)")
(let a2 = (a index 4))
(assert: (a2 == nil) "test (list index)")
(let a3 = (a index (|i|(i == "1"))))
(assert: (a3 == 0) "test (list index)")
(let a4 = (a index (|i|(i == "9"))))
(assert: (a4 == nil) "test (list index)")

# rindex #
(let b = ["1" "2" "3" "1"])
(let b1 = (b rindex 1))
(assert: (b1 == nil) "test (list rindex)")
(let b2 = (b rindex 4))
(assert: (b2 == nil) "test (list rindex)")
(let b3 = (b rindex (|i|(i == "1"))))
(assert: (b3 == 3) "test (list rindex)")
(let b4 = (b rindex (|i|(i == "9"))))
(assert: (b4 == nil) "test (list rindex)")

# first #
(let c = [ 1 2 3 ])
(let c1 = (c first))
(assert: (c1 == 1) "test (list first)")
(let c2 = (c first -1))
(assert: ((c2 to_s) == ([] to_s)) "test (list first)")
(let c3 = (c first 4))
(assert: ((c3 to_s) == ([1 2 3] to_s)) "test (list first)")

# include? #
(let d = [1 2 3])
(let d1 = (d include? 1))
(assert: d1 "test (list include?)")
(let d2 = (d include? 0))
(assert: (d2 !) "test (list include?)")

# insert #
(let e = [1 2 3])
(let e1 = (e insert -1 9 8))
(assert: ((e1 to_s) == ([1 2 9 8 3] to_s)) "test (list insert)")
(assert: (e1 == e) "test (list insert)")
(let e2 = (e insert 2 0 0))
(assert: (e2 == e) "test (list insert)")
(assert: ((e2 to_s) == ([1 2 0 0 9 8 3] to_s)) "test (list insert)")

# join #
(let f = [1 2])
(let f1 = (f join "-"))
(assert: (f1 == "1-2") "test (list join)")

# keep_if #
(let g = [1 2])
(let f = (|i| true))
(let g1 = (g keep_if f))
(assert: (g1 == g) "test (list keep_if)")
(assert: ((g1 to_s) == ([1 2] to_s)) "test (list keep_if)")

# last #
(let h = [0 1 2 3])
(let h1 = (h last))
(assert: (h1 == 3) "test (list last)")
(let h2 = (h last 1))
(assert: ((h2 to_s) == ([3] to_s)) "test (list last)")
(let h3 = (h last 2))
(assert: ((h3 to_s) == ([2 3] to_s)) "test (list last)")
(let h4 = (h last 3))
(assert: ((h4 to_s) == ([1 2 3] to_s)) "test (list last)")
(let h5 = (h last 4))
(assert: ((h5 to_s) == ([0 1 2 3] to_s)) "test (list last)")
(let h6 = (h last 10))
(assert: ((h6 to_s) == ([0 1 2 3] to_s)) "test (list last)")

# size #
(assert: (([1 2] size) == 2) "test (list size)")
(assert: (([] size) == 0) "test (list size)")

# pop #
(let i = [])
(let i1 = (i pop))
(assert: (i1 == nil) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop))
(assert: (i1 == 6) "test (list pop)")
(assert: ((i to_s) == ([1 2 3 4 5] to_s)) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop 0))
(assert: ((i1 to_s) == ([] to_s)) "test (list pop)")
(assert: ((i to_s) == ([1 2 3 4 5 6] to_s)) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop 1))
(assert: ((i1 to_s) == ([6] to_s)) "test (list pop)")
(assert: ((i to_s) == ([1 2 3 4 5] to_s)) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop 2))
(assert: ((i1 to_s) == ([5 6] to_s)) "test (list pop)")
(assert: ((i to_s) == ([1 2 3 4] to_s)) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop 3))
(assert: ((i1 to_s) == ([4 5 6] to_s)) "test (list pop)")
(assert: ((i to_s) == ([1 2 3] to_s)) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop 4))
(assert: ((i1 to_s) == ([3 4 5 6] to_s)) "test (list pop)")
(assert: ((i to_s) == ([1 2] to_s)) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop 5))
(assert: ((i1 to_s) == ([2 3 4 5 6] to_s)) "test (list pop)")
(assert: ((i to_s) == ([1] to_s)) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop 6))
(assert: ((i1 to_s) == ([1 2 3 4 5 6] to_s)) "test (list pop)")
(assert: ((i to_s) == ([] to_s)) "test (list pop)")
(let i = [1 2 3 4 5 6])
(let i1 = (i pop 7))
(assert: ((i1 to_s) == ([1 2 3 4 5 6] to_s)) "test (list pop)")
(assert: ((i to_s) == ([] to_s)) "test (list pop)")

# shift #
(let a = [])
(let a1 = (a shift))
(assert: (a1 == nil) "test (list shift)")
(let a = [1 2 3])
(let a1 = (a shift))
(assert: (a1 == 1) "test (list shift)")
(assert: ((a to_s) == ([2 3] to_s)) "test (list shift)")
(let a = [1 2 3 4])
(let a1 = (a shift 1))
(assert: ((a1 to_s) == ([1] to_s)) "test (list shift)")
(assert: ((a to_s) == ([2 3 4] to_s)) "test (list shift)")
(let a = [1 2 3 4])
(let a1 = (a shift 2))
(assert: ((a1 to_s) == ([1 2] to_s)) "test (list shift)")
(assert: ((a to_s) == ([3 4] to_s)) "test (list shift)")
(let a = [1 2 3 4])
(let a1 = (a shift 3))
(assert: ((a1 to_s) == ([1 2 3] to_s)) "test (list shift)")
(assert: ((a to_s) == ([4] to_s)) "test (list shift)")
(let a = [1 2 3 4])
(let a1 = (a shift 4))
(assert: ((a1 to_s) == ([1 2 3 4] to_s)) "test (list shift)")
(assert: ((a to_s) == ([] to_s)) "test (list shift)")
(let a = [1 2 3 4])
(let a1 = (a shift 5))
(assert: ((a1 to_s) == ([1 2 3 4] to_s)) "test (list shift)")
(assert: ((a to_s) == ([] to_s)) "test (list shift)")
(let a = [1 2 3 4])
(let a1 = (a shift -2))
(assert: ((a1 to_s) == ([] to_s)) "test (list shift)")
(assert: ((a to_s) == ([1 2 3 4] to_s)) "test (list shift)")

# reject #
(let c = [1 2 3 1 2 1 1 9])
(let f = (|i| (i == 1)))
(let c1 = (c reject f))
(assert: ((c1 to_s) == ([2 3 2 9] to_s)) "test (list reject)")

# reject! #
(let c = [1 2 3 1 2 1 1 9])
(let f = (|i| (i == 1)))
(let c2 = (c reject! f))
(assert: (c2 == c) "test (list reject!)")
(assert: ((c2 to_s) == ([2 3 2 9] to_s)) "test (list reject!)")
(let f = (|i| false))

# reverse #
(let e = [1 2 3])
(let e1 = (e reverse))
(assert: (e1 != e) "test (list reverse)")
(assert: ((e1 to_s) == ([3 2 1] to_s)) "test (list reverse)")

# reverse! #
(let e = [1 2 3])
(let e1 = (e reverse!))
(assert: (e1 == e) "test (list reverse!)")
(assert: ((e1 to_s) == ([3 2 1] to_s)) "test (list reverse!)")

# sample #
(let f = [1 2 3 4])
(let f1 = (f sample))
(let f2 = (f sample))
(let f3 = (f sample))
(let f4 = (f sample 1))
(let f5 = (f sample 30))
(assert: (f1 < 5) "test (list sample)")
(assert: (f2 < 5) "test (list sample)")
(assert: (f3 < 5) "test (list sample)")
(assert: ((f4 @ 0) < 5) "test (list sample)")
(assert: ((f5 size) == 30) "test (list sample)")

# select #
(let a = [1 2 1 2 3 4 8 9 3])
(let f = (|i| (i == 3)))
(let f1 = (|i| (i == -3)))
(let a1 = (a select f))
(assert: ((a1 to_s) == ([3 3] to_s)) "test (list select)")

# select! #
(let a = [1 2 1 2 3 4 8 9 3])
(let f1 = (|i| (i == -3)))
(let a2 = (a select! f1))
(assert: (a2 == a) "test (list select!)")
(assert: ((a2 to_s) == ([] to_s)) "test (list select!)")

# slice #
(let a = [1 2 3])
(let b = (a slice 0 2))
(assert: ((b to_s) == ([1 2] to_s)) "test (list slice)")

# slice! #
(let a = [1 2 3 4 5])
(let b = (a slice! 2 1))
(assert: (b != a) "test (list slice!)")
(assert: ((b to_s) == ([3] to_s)) "test (list slice!)")

# sort #
(let x = ["b" 1.2 "a" 3 4 1 2 9 18 222 6 16])
(let x1 = (x sort (|x y| true)))
(assert: (x1 != x) "test (list sort)")
(assert: ((x1 to_s) == ([16 6 222 18 9 2 1 4 3 "a" 1.2 "b"] to_s)) "test (list sort)")
(let x2 = (x sort))
(assert: (x2 != x) "test (list sort)")
(assert: ((x2 to_s) == (["b" "a" 1.2 1 2 3 4 6 9 16 18 222] to_s)) "test (list sort)")

# sort! #
(let x = ["b" 1.2 "a" 3 4 1 2 9 18 222 6 16])
(let x1 = (x sort! (|x y| true)))
(assert: (x1 == x) "test (list sort!)")
(assert: ((x1 to_s) == ([16 6 222 18 9 2 1 4 3 "a" 1.2 "b"] to_s)) "test (list sort!)")
(let x2 = (x sort!))
(assert: (x2 == x) "test (list sort!)")
(assert: ((x2 to_s) == (["a" "b" 1 1.2 2 3 4 6 9 16 18 222] to_s)) "test (list sort!)")

# take #
(let x = [1 2 3 4 5])
(let y = (x take 60))
(assert: ((y to_s) == ([1 2 3 4 5] to_s)) "test (list take)")
(let z = (x take 3))
(assert: ((z to_s) == ([1 2 3] to_s)) "test (list take)")

# take_if #
(let x = [1 2 3 4 5])
(let z = (x take_if (|i| (i == 1))))
(assert: ((z to_s) == ([1] to_s)) "test (list take_if)")

# uniq #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x uniq))
(assert: ((y to_s) == (["1" nil "3" false "2"] to_s)) "test (list uniq)")

# uniq! #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x uniq!))
(assert: (y == x) "test (list uniq!)")
(assert: ((y to_s) == (["1" "2" nil "3" false] to_s)) "test (list uniq!)")

# values@ #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x values@ 1 -2 -6 -7 6))
(assert: ((y to_s) == (["2" false "1" nil nil] to_s)) "test (list values@)")
(let y = (x values@))
(assert: ((y to_s) == ([] to_s)) "test (list values@)")

# zip #
(let x = ["1" "2" nil "3" false "2"])
(let y = (x zip [1 9] [1 2 3 4 5 6 7 8 9]))
(assert: ((y to_s) == ([["1" 1 1] ["2" 9 2] [nil nil 3] ["3" nil 4] [false nil 5] ["2" nil 6]] to_s)) "test (list values@)")

(puts: "List/list checkpoints all passed.")
