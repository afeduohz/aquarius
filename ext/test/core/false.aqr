# >>> module False #

# == #
(assert:(False == False) "test (False == False)")

# != #
(assert:(False != 1) "test (False != 1)")
(assert:(False != false) "test (False != false)")

# to_s #
(assert:((False to_s) == "<module False>") "test (False to_s)")

# to_b #
(assert:((False to_b) == true) "test (False to_b)")

# type #
(assert:((False type) == "lambda") "test (False type)")

# : #
(assert:((False:) == false) "test (False:)")

# >>> value false #

# == #
(assert:(false == false) "test (false == false)")

# != #
(assert:(false != 1) "test (false != 1)")
(assert:((false != false) !) "test (false != false)")

# to_s #
(assert:((false to_s) == "false") "test (false to_s)")

# to_b #
(assert:((false to_b) == false) "test (false to_b)")

# type #
(assert:((false type) == "False") "test (false type)")

# & #
(assert:((false &) == false) "test (false &)")
(assert:((false & false) == false) "test (false & false)")
(assert:((false & false) == false) "test (false & false)")
(assert:((false & false false) == false) "test (false & false false)")
(assert:((false & nil) == false) "test (false & nil)")
(assert:((false & 1 "" 0 -1 String) == false) "test (false & 1 \"\" 0 -1 String)")

# | #
(assert:((false |) == false) "test (false |)")
(assert:((false | false) == false) "test (false | false)")
(assert:((false | false) == false) "test (false | false)")
(assert:((false | false false) == false) "test (false | false false)")
(assert:((false | nil) == false) "test (false | nil)")
(assert:((false | 1 "" 0 -1 String) == true) "test (false | 1 \"\" 0 -1 String)")

# ^ #
(assert:((false ^) == false) "test (false ^)")
(assert:((false ^ false) == false) "test (false ^ false)")
(assert:((false ^ false) == false) "test (false ^ false)")
(assert:((false ^ false false) == false) "test (false ^ false)")

# ! not #
(assert:((false !) == true) "test (false !)")
(assert:((false not) == true) "test (false not)")

(puts: "False/false checkpoints all passed.")