# >>> module Dict #

# == #
(assert:(Dict == Dict) "test (Dict == Dict)")

# != #
(assert:(Dict != 1) "test (Dict != 1)")
(assert:(Dict != nil) "test (Dict != nil)")

# to_s #
(assert:((Dict to_s) == "<module Dict>") "test (Dict to_s)")

# to_b #
(assert:((Dict to_b) == true) "test (Dict to_b)")

# type #
(assert:((Dict type) == "lambda") "test (Dict type)")

# : #
(assert:((Dict:) != nil) "test (Dict:)")

# >>> value dict #

# == #
(assert:(({} == {})!) "test ({} == {})")

# != #
(assert:({} != {}) "test ({} != {})")

# to_s #
(assert:(({} to_s) == "{}") "test ({} to_s)")

# to_b #
(assert:(({} to_b) == true) "test ({} to_b)")

# type #
(assert:(({} type) == "Dict") "test ({} type)")

# << #
(let x = {})
(x << "x")
(assert:((x key? "x") & ((x fetch "x") == nil)) "test (dict <<)")
(x << "y" 1)
(assert:((x key? "y") & ((x fetch "y") == 1)) "test (dict <<)")
(x << "z" nil)
(assert:((x key? "z") & ((x fetch "z") == nil)) "test (dict <<)")
(x << "t" true)
(assert:((x key? "t") & (x fetch "t")) "test (dict <<)")
(x << "f" [1 false])
(assert:((x key? "f") & (((x fetch "f") to_s) == ([1 false] to_s))) "test (dict <<)")
(x << "r" {"name": "george"})
(assert:((x key? "r") & (((x fetch "r") to_s) == ({"name": "george"} to_s))) "test (dict <<)")

# any? #
(let x = {})
(let y = (x any?))
(assert: (y !) "test (dict any?)")
(let x = {"1": nil "2": nil "3": nil})
(let y = (x any?))
(assert: (y !) "test (dict any?)")
(let x = {"empty": 1})
(let y = (x any?))
(assert: y "test (dict any?)")
(let f = (|k (v = false)|v))
(let x = {"func": 1})
(let y = (x any? f))
(assert: y "test (dict any?)")

# all? #
(let x = {})
(let y = (x all?))
(assert: y "test (dict all?)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x all?))
(assert: (y !) "test (dict all?)")
(let f = (|k|k))
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x all? f))
(assert: y "test (dict all?)")

# clear #
(let x = {"1": 1 "2": 2 "3": nil})
(x clear)
(assert:((x to_s) == ({} to_s)) "test (dict clear)")
(assert:((x size) == 0) "test (dict clear)")

# clone #
(let x = {"1": 1})
(let y = (x clone))
(assert:((x to_s) == (y to_s)) "test (dict clone)")

# delete #
(let x = {"1": 1 "2": 2 "3": nil})
(assert:((x size) == 3) "test (dict delete)")
(let y = (x delete "d"))
(assert:((x size) == 3) "test (dict delete)")
(assert:(y == nil) "test (dict delete)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x delete "2"))
(assert:((x size) == 2) "test (dict delete)")
(assert: (y == 2) "test (dict delete)")

# delete_if #
(let f = (|k v|(v == 1)))
(let x = {"1": 1 "2": 2 "3": nil})
(assert:((x size) == 3) "test (dict delete_if)")
(let y = (x delete_if f))
(assert:((y size) == 2) "test (dict delete_if)")
(assert:((y key? "1") !) "test (dict delete_if)")

# each #
(let x = {"1": 1 "2": 2 "3": nil})
(let f = (|k v|(assert: ((x fetch k) == v))))
(x each f)

# empty? #
(let x = {"1": 1 "2": 2 "3": nil})
(assert:((x empty?)!) "test (dict empty?)")
(assert:({} empty?) "test (dict empty?)")

# fetch #
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x fetch "1"))
(assert:(y == 1) "test (dict fetch)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x fetch "4" "NOT_FOUND"))
(assert:(y == "NOT_FOUND") "test (dict fetch)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x fetch "2" "FOUND"))
(assert:(y == 2) "test (dict fetch)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x fetch "2" (|k v| (k + v))))
(assert:(y == "22") "test (dict fetch)")

# keep_if #
(let f = (|k v|(v == 1)))
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x keep_if f))
(assert:(({"1": 1} to_s) == (y to_s)) "test (dict keep_if)")

# key #
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x key 1))
(assert:(y == "1") "test (dict key)")
(let y = (x key true))
(assert:(y == nil) "test (dict key)")
(let y = (x key nil))
(assert:(y == "3") "test (dict key)")

# keys #
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x keys))
(assert:((y size) == 3) "test (dict keys)")
(let x = {})
(let y = (x keys))
(assert:((y to_s) == ([] to_s)) "test (dict keys)")

# size #
(assert:(({} size) == 0) "test (dict size)")
(assert:(({"1": 1 "2": 2 "3": nil} size) == 3) "test (dict size)")

# key? member? include? #
(let x = {"1": 1 "2": 2 "3": nil})
(assert:(({} key? "1") !) "test (dict key?)")
(assert:((x member? "z") !) "test (dict member?)")
(assert: (x include? "2") "test (dict include?)")

# merge #
(let x = {"1": 1})
(let y = {})
(let z = {"name": "george"})
(let y1 = (x merge y))
(assert:((y1 size) == 1) "test (dict merge)")
(let z1 = (x merge z))
(assert:((z1 size) == 2) "test (dict merge)")
(let x = {"1": 1})
(let y = {"1": "one"})
(let z = (x merge y))
(assert:((z size) == 1) "test (dict merge)")
(assert:((z fetch "1") == "one") "test (dict merge)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = {"1": "one"})
(let z = (x merge y (|k o n|(k + n o))))
(assert:((z fetch "1") == "11one") "test (dict merge)")

# merge! #
(let x = {"1": 1})
(let y = {})
(let z = (x merge! y))
(assert: (z == x) "test (dict merge!)")
(assert:((x size) == 1) "test (dict merge!)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = {"name": "george"})
(let z = (x merge! y))
(assert: (z == x) "test (dict merge!)")
(assert: ((x fetch "name") == "george") "test (dict merge!)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = {"1": "one"})
(let z = (x merge! y))
(assert: (z == x) "test (dict merge!)")
(assert:((z fetch "1") == "one") "test (dict merge!)")
(let x = {"1": 1 "2": 2 "3": nil})
(let y = {"1": "one"})
(let z = (x merge! y (|k o n|(k + n o))))
(assert: (z == x) "test (dict merge!)")
(assert:((z fetch "1") == "1one1") "test (dict merge!)")

# replace #
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x replace {}))
(assert: (y == x) "test (dict replace)")
(assert: ((y to_s) == ({} to_s)) "test (dict replace)")

# reject #
(let f = (|k v|(v == 1)))
(let x = {"1": 1})
(let y = (x reject f))
(assert: ((y to_s) == ({} to_s)) "test (dict reject)")
(assert: (y != x) "test (dict reject)")

# reject! #
(let f = (|k v|(v == 1)))
(let x = {"1": 1})
(let y = (x reject! f))
(assert: ((y to_s) == ({} to_s)) "test (dict reject!)")
(assert: (y == x) "test (dict reject!)")

# select #
(let f = (|k v|(v == 1)))
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x select f))
(assert: ((y to_s) == ({"1": 1} to_s)) "test (dict select)")
(assert: (y != x) "test (dict select)")

# select! #
(let f = (|k v|(v == 1)))
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x select! f))
(assert: ((y to_s) == ({"1": 1} to_s)) "test (dict select!)")
(assert: (y == x) "test (dict select!)")

# shift #
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x shift))
(assert: (y != x) "test (dict shift)")
(let y = (x shift))
(assert: (y != x) "test (dict shift)")
(let y = (x shift))
(assert: (y != x) "test (dict shift)")
(let y = (x shift))
(assert: (y == nil) "test (dict shift)")

# to_l #
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x to_l))
(assert:((y type) == "List") "test (dict to_l)")
(let z = (y @ 0))
(assert:((z type) == "List") "test (dict to_l)")
(assert:((z size) == 2) "test (dict to_l)")

# value? #
(let x = {"1": 1 "2": 2 "3": nil})
(assert:(x value? 1) "test (dict value?)")
(assert:((x value? "1")!) "test (dict value?)")
(assert:(x value? nil) "test (dict value?)")

# values #
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x values))
(assert:((y size) == 3) "test (dict values)")

# values@ #
(let x = {"1": 1 "2": 2 "3": nil})
(let y = (x values@ "s" "name" "1"))
(assert:((y size) == 3) "test (dict values@)")
(assert:((y @ 0) == nil) "test (dict values@)")
(assert:((y @ 1) == nil) "test (dict values@)")
(assert:((y @ 2) == 1) "test (dict values@)")

(puts: "Dict/dict checkpoints all passed.")
