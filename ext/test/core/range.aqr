# >>> module Range #

# == #
(assert:(Range == Range) "test (Range == Range)")

# != #
(assert:(Range != 1) "test (Range != 1)")
(assert:(Range != nil) "test (Range != nil)")

# to_s #
(assert:((Range to_s) == "<module Range>") "test (Range to_s)")

# to_b #
(assert:((Range to_b) == true) "test (Range to_b)")

# type #
(assert:((Range type) == "lambda") "test (Range type)")

# : #
(let x = (Range: 1))
(assert:((x to_s) == "(1..0)") "test (Range: 1)")

# >>> value range #

# == #
(let x = (Range: 1))
(let y = (Range: 1))
(assert:((x == y) !) "test ((Range: 1) == (Range: 1))")

# != #
(let x = (Range: 1))
(let y = (Range: 1))
(assert:(x != y) "test (x != y)")

# to_s #
(assert:(((Range: 1) to_s) == "(1..0)") "test (range to_s)")

# to_b #
(assert:(((Range: 1) to_b) == true) "test ((Range: 1) to_b)")

# type #
(assert:(((Range: 1) type) == "Range") "test ((Range: 1) type)")

# count #
(let x = (Range: 2))
(assert: ((x count) == 2 ) "test (Range count)")

# begin #
(let x = (Range: 2 10))
(assert: ((x begin) == 2 ) "test (Range begin)")

# end #
(let x = (Range: 2 10))
(assert: ((x end) == 10 ) "test (Range end)")

# >> #
(let x = (Range: 2 5))
(let r = "")
(let y = (|i|(r << i)))
(x >> y)
(assert: (r == "234") "test (Range >> callback(Lambda))")

# << #
(let x = (Range: 2 5))
(let r = "")
(x << y)
(assert: (r == "432") "test (Range << callback(Lambda))")

# >>> #
(let x = (Range: 1 10))
(let r = "")
(let y = (|i|(r << i)))
(x >>> 2 y)
(assert: (r == "13579") "test (Range >>> step(Int) callback(Lambda))")

# <<< #
(let x = (Range: 1 10))
(let r = "")
(x <<< 3 y)
(assert: (r == "963") "test (Range <<< step(Int) callback(Lambda))")

# sample #
(let x = (Range: 1 10))
(x >> (|| (assert: ((x sample) < 10) "test (Range sample)")))

(puts: "Range/range checkpoints all passed.")
