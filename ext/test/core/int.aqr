"+"
"(Int + other(...Int|Float)"

(let x = 1)
(let y = (x + 10000000000000000))
(assert: (y == 10000000000000001) "int +,1")
(assert: ((y type) == "Int") "int +,2")
(let y = (x + 1.0))
(assert: (y == 2.0) "int +,3")
(assert: ((y type) == "Float") "int +,4")

"-"
"(Int - other(...Int|Float)"

(let x = 10000)
(let y = (x - 10 20))
(assert: (y == 9970) "int -,1")
(assert: ((y type) == "Int") "int -,2")

(let y = (x - 1.0))
(assert: (y == 9999.0) "int -,3")
(assert: ((y type) == "Float") "int -,4")

"*"
"(Int * other(...Int|Float)"

(let x = 2)
(let y = (x * 2 -2))
(assert: (y == -8) "int *,1")
(assert: ((y type) == "Int") "int *,2")

(let y = (x * 2.0))
(assert: (y == 4.0) "int *,3")
(assert: ((y type) == "Float") "int *,4")

"/"
"(Int / other(...Int|Float)"

(let x = 2)
(let y = (x / -1.0))
(assert: (y == -2.0) "int /,1")
(assert: ((y type) == "Float") "int /,2")
(let y = (x / 2.0))
(assert: (y == 1.0) "int /,3")
(assert: ((y type) == "Float") "int /,4")
(let y = (x / 0.5))
(assert: (y == 4) "int /,5")
(assert: ((y type) == "Float") "int /,6")

"%"
"(Int % other(Int)"

(let x = 5)
(let y = (x % 2))
(assert: (y == 1) "int %,1")
(assert: ((y type) == "Int") "int %,2")
(let y = (4 % 2))
(assert: (y == 0) "int %,3")

"**"
"(Int ** x(Int|Float)"

(let x = 2)
(let y = (x ** 3))
(assert: (y == 8) "int **,1")
(assert: ((y type) == "Float") "int **,2")
(let y = (x ** -3))
(assert: (y == 0.125) "int **,3")
(assert: ((y type) == "Float") "int **,4")
(let y = (x ** 0))
(assert: (y == 1.0) "int **,5")
(assert: ((y type) == "Float") "int **,6")

">"
"(Int > x(*)"
"x will be transfer to Int/Float"

(let x = 2)
(assert: ((x > 3)!) "int >,1")
(assert: ((x > 2)!) "int >,2")
(assert: (x > nil) "int >,3")
(assert: ((-1 > nil)!) "int >,4")
(assert: ((x > 4.5)!) "int >,5")
(assert: (x > 1.6) "int >,6")

">="
"(Int >= x(*)"
"x will be transfer to Int/Float"

(let x = 2)
(assert: ((x >= 3)!) "int >=,1")
(assert: (x >= 2) "int >=,2")
(assert: (x >= nil) "int >=,3")
(assert: ((-1 >= nil)!) "int >=,4")
(assert: ((x >= 4.5)!) "int >=,5")
(assert: ((1 >= 1.6)!) "int >=,6")

"<"
"(Int < x(*)"
"x will be transfer to Int/Float"

(let x = 2)
(assert: (x < 3) "int <,1")
(assert: ((x < 2.0)!) "int <,2")
(assert: (-1 < nil) "int <,3")
(assert: (x < 4.5) "int <,5")

"<="
"(Int <= x(*)"
"x will be transfer to Int/Float"

(let x = 2)
(assert: (x <= 3) "int <=,1")
(assert: (x <= 2.0) "int <=,2")
(assert: (0 <= nil) "int <=,3")
(assert: (x <= 4.5) "int <=,5")

"abs"
"(Int abs)"
""

(assert: ((2 abs) == 2)"int abs,1")
(assert: ((-1 abs) == 1) "int abs,2")
(assert: ((0 abs) == 0) "int <=,3")
(assert: ((-0 abs) == 0) "int <=,4")

"&"
"(Int & other(Int))"
""

(assert: ((1 & 1) == 1)"int &,1")
(assert: ((1 & 2) == 0)"int &,2")

"|"
"(Int | other(Int))"
""

(assert: ((1 | 1) == 1)"int |,1")
(assert: ((1 | 2) == 3)"int |,2")

"^"
"(Int ^ other(Int))"
""

(assert: ((1 ^ 1) == 0)"int ^,1")
(assert: ((1 ^ 2) == 3)"int ^,2")

"<<"
"(Int << other(Int))"
""

(assert: ((1 << 1) == 2) "int <<,1")
(assert: ((1 << 2) == 4) "int <<,2")
(assert: ((1 << 100) == 0) "int <<,3")

">>"
"(Int >> other(Int))"
""

(assert: ((4 >> 1) == 2) "int >>,1")
(assert: ((4 >> 2) == 1) "int >>,2")
(assert: ((4 >> 100) == 0) "int >>,3")

"~"
"(Int ~)"
""

(assert: ((1 ~) == -2) "int ~,1")
(assert: ((4 ~) == -5) "int ~,2")

"negate"
"(Int negate)"
""

(assert: ((-1 negate) == 1)"int negate,1")
(assert: ((1 negate) == -1)"int negate,2")
(assert: ((0 negate) == 0)"int negate,3")
(assert: ((0 negate) == +0)"int negate,4")
(assert: ((0 negate) == -0)"int negate,5")
(assert: ((-0 negate) == 0)"int negate,6")
(assert: ((-0 negate) == +0)"int negate,7")
(assert: ((-0 negate) == -0)"int negate,8")
(assert: ((+0 negate) == 0)"int negate,9")
(assert: ((+0 negate) == +0)"int negate,10")
(assert: ((+0 negate) == -0)"int negate,11")

"even?"
"(Int even?)"
""

(assert:  ((-1 even?)!) "int even?,1")
(assert:  (-2 even?) "int even?,2")
(assert:  ((11 even?)!) "int even?,3")
(assert:  (12 even?) "int even?,4")

"odd?"
"(Int odd?)"
""

(assert:  ((-2 odd?)!) "int odd?,1")
(assert:  (-3 odd?) "int odd?,2")
(assert:  ((12 odd?)!) "int odd?,3")
(assert:  (11 odd?) "int odd?,4")

"next"
"(Int next)"
""

(assert:  ((-2 next) == -1) "int next,1")
(assert:  ((0 next) == 1) "int next,2")
(assert:  ((111111110 next) == 111111111) "int next,3")

"pred"
"(Int pred)"
""

(assert:  ((-2 pred) == -3) "int pred,1")
(assert:  ((0 pred) == -1) "int pred,2")
(assert:  ((110 pred) == 109) "int pred,3")

".."
"(Int .. [end(Int)])"
""

(let x = (1 .. ))
(assert: ((x type) == "Range") "int ..,1")
(assert: ((x begin) == 1) "int ..,2")
(assert: ((x end) == 0) "int ..,3")
(let x = (1 .. 5))
(assert: ((x type) == "Range") "int ..,4")
(assert: ((x begin) == 1) "int ..,5")
(assert: ((x end) == 5) "int ..,6")
(let r = "")
(x >> (|i| (r << i)))
(assert: (r == "1234") "int ..,7")

"times"
"(Int times callback(Lambda))"
""

(let x = "")
(3 times (|i| (x << i)))
(assert: (x == "012") "int times,7")

"to_f"
"(Int to_f)"
""

(let x = 11)
(let y = (x to_f))
(assert: (y == 11.0) "int to_f,1")
(assert: ((y type) == "Float") "int to_f,2")

"to_i"
"(Int to_i)"
""

(let x = 11)
(let y = (x to_i))
(assert: (y == x) "int to_i,1")
(assert: ((y type) == "Int") "int to_i,2")
