"+"
"(Float + other(...Int|Float)"

(let x = 1.0)
(let y = (x + 10000000000000000))
(assert: (y == 10000000000000001.0) "float +,1")
(assert: ((y type) == "Float") "float +,2")
(let y = (x + 1.0))
(assert: (y == 2.0) "float +,3")
(assert: ((y type) == "Float") "float +,4")

"-"
"(Float - other(...Int|Float)"

(let x = 10000.0)
(let y = (x - 10 20))
(assert: (y == 9970.0) "float -,1")
(assert: ((y type) == "Float") "float -,2")

(let y = (x - 1.0))
(assert: (y == 9999.0) "float -,3")
(assert: ((y type) == "Float") "float -,4")

"*"
"(Float * other(...Int|Float)"

(let x = 2)
(let y = (x * 2 -2))
(assert: (y == -8) "float *,1")
(assert: ((y type) == "Int") "float *,2")

(let y = (x * 2.0))
(assert: (y == 4.0) "float *,3")
(assert: ((y type) == "Float") "float *,4")

"/"
"(Float / other(...Int|Float)"

(let x = 2.0)
(let y = (x / -1))
(assert: (y == -2.0) "float /,1")
(assert: ((y type) == "Float") "float /,2")
(let y = (x / 2.0))
(assert: (y == 1.0) "float /,3")
(assert: ((y type) == "Float") "float /,4")
(let y = (x / 0.5))
(assert: (y == 4) "float /,5")
(assert: ((y type) == "Float") "float /,6")

"**"
"(Float ** x(Int|Float)"

(let x = 2.0)
(let y = (x ** 3))
(assert: (y == 8.0) "float **,1")
(assert: ((y type) == "Float") "float **,2")
(let y = (x ** -3))
(assert: (y == 0.125) "float **,3")
(assert: ((y type) == "Float") "float **,4")
(let y = (x ** 0))
(assert: (y == 1.0) "float **,5")
(assert: ((y type) == "Float") "float **,6")

">"
"(Float > x(*)"
"x will be transfer to Int/Float"

(let x = 2.0)
(assert: ((x > 3.0)!) "float >,1")
(assert: ((x > 2)!) "float >,2")
(assert: (x > nil) "float >,3")
(assert: ((-1.0 > nil)!) "float >,4")
(assert: ((x > 4.5)!) "float >,5")
(assert: (x > 1.6) "float >,6")

">="
"(Float >= x(*)"
"x will be transfer to Int/Float"

(let x = 2.0)
(assert: ((x >= 3.0)!) "float >=,1")
(assert: (x >= 2) "float >=,2")
(assert: (x >= nil) "float >=,3")
(assert: ((-1 >= nil)!) "float >=,4")
(assert: ((x >= 4.5)!) "float >=,5")
(assert: ((1 >= 1.6)!) "float >=,6")

"<"
"(Float < x(*)"
"x will be transfer to Int/Float"

(let x = 2.0)
(assert: (x < 3) "float <,1")
(assert: ((x < 2.0)!) "float <,2")
(assert: (-1 < nil) "float <,3")
(assert: (x < 4.5) "float <,5")

"<="
"(Float <= x(*)"
"x will be transfer to Int/Float"

(let x = 2.0)
(assert: (x <= 3) "float <=,1")
(assert: (x <= 2.0) "float <=,2")
(assert: (0 <= nil) "float <=,3")
(assert: (x <= 4.5) "float <=,5")

"abs"
"(Float abs)"
""

(assert: ((2.1 abs) == 2.1)"float abs,1")
(assert: ((-1.2 abs) == 1.2) "float abs,2")
(assert: ((0.0 abs) == 0) "float <=,3")
(assert: ((-0.0 abs) == 0) "float <=,4")

"negate"
"(Float negate)"
""

(assert: ((-1.1 negate) == 1.1)"float negate,1")
(assert: ((1.2 negate) == -1.2)"float negate,2")

"to_f"
"(Float to_f)"
""

(let x = 11.2)
(let y = (x to_f))
(assert: (y == 11.2) "float to_f,1")
(assert: ((y type) == "Float") "float to_f,2")

"to_i"
"(Float to_i)"
""

(let x = 11.8)
(let y = (x to_i))
(assert: (y == 11) "float to_i,1")
(assert: ((y type) == "Int") "float to_i,2")